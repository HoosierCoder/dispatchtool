package com.hoosiercoder.dispatchtool.user.controller;

import com.hoosiercoder.dispatchtool.user.dto.UserDTO;
import com.hoosiercoder.dispatchtool.user.entity.UserRole;
import com.hoosiercoder.dispatchtool.user.service.UserService;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

/**
 * Author: HoosierCoder
 */
@RestController
@RequestMapping("/api/v1/users")
public class UserController {
    @Autowired
    private UserService userService;

    @PostMapping
    public ResponseEntity createUser(@Valid @RequestBody UserDTO userDTO) {
        userDTO.setUserId(null);//since ID is autogenerated, null out.

        UserDTO newUserDto = userService.saveNewUser(userDTO);

        return ResponseEntity.ok(newUserDto);
    }

    @GetMapping
    public ResponseEntity<List<UserDTO>> getUsers() {

        List<UserDTO> users = userService.listUsers();

        if (users.isEmpty()) {
            //No return (204) returned
            return ResponseEntity.noContent().build();
        }

        return ResponseEntity.ok(users);
    }

    @GetMapping("/{userId}")
    public ResponseEntity getUserById(@PathVariable Long userId) {
        Optional<UserDTO> user = userService.getUserById(userId);

        if (user.isEmpty()) {
            return ResponseEntity.notFound().build();
        }

        return ResponseEntity.ok(user);
    }

    @GetMapping("/lastname/{lastName}")
    public ResponseEntity<List<UserDTO>> getUserByLastName(@PathVariable String lastName) {
        List<UserDTO> users = userService.getUserByLastName(lastName);

        if (users.isEmpty()) {
            return ResponseEntity.noContent().build();
        }

        return ResponseEntity.ok(users);
    }

    @GetMapping("/role/{role}")
    public ResponseEntity<List<UserDTO>> getUserByUserRole(@PathVariable UserRole role) {

        List<UserDTO> users = userService.getUserByUserRole(role);

        if (users.isEmpty()) {
            return ResponseEntity.noContent().build();
        }

        return ResponseEntity.ok(users);
    }

    @GetMapping("/active")
    public ResponseEntity<List<UserDTO>> getActiveUsers() {

        List<UserDTO> users = userService.getByIsActive();

        if (users.isEmpty()) {
            return ResponseEntity.noContent().build();
        }

        return ResponseEntity.ok(users);
    }
}
